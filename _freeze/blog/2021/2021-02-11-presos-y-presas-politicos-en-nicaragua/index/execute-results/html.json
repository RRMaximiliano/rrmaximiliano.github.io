{
  "hash": "ac74e262cd95528794890cb8b48fc886",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Presos y presas políticos en Nicaragua\ndate: '2019-04-19'\ncategories:\n  - Nicaragua\n  - ggplot\n  - viz\n---\n\n\n\nDesde mi cuenta en [twitter](https://twitter.com/rrmaximiliano), he compartido gráficos y analizado diversos datos sobre la crisis política en Nicaragua. Este post tiene dos objetivos: (1) presentar la información actual sobre el total de presas y presos políticos, y (2) compartir herramientas para la elaboración de gráficos.\n\n## Los datos\nLos datos que ocupo provienen del Comité Pro Liberación de Presas y Presos Políticos. Pueden encontrar las datos en la página [web](http://presospoliticosnicaragua.com/) del comité, o pueden descargarlos [acá](/data). Los principales problemas de los datos del comité es que están en un archivo pdf, y no están \"limpios.\" Por limpio, me refiero a que no ha habido ninguna transformación de las variables para hacer análisis de datos. Sobre esto, tal vez en el futuro, me animo a realizar un pequeño post sobre limpieza de datos.\n\n## El gráfico\n\nEl gráfico de la evolución total de presos y presas políticos es el siguiente:\n\n![Fig 1](figs/preso_total_190401.gif)\n\nDe hecho, es un gráfico sencillo de replicar en `R` y necesitamos pocos paquetes para ello.\n\n### Códigos \nLo primero que tenemos que hacer es cargar nuestras librerías. Necesitamos tres paquetes: `ggplot`, `gganimate`, `dplyr`, y `extrafont`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(dplyr)\nlibrary(extrafont)\n```\n:::\n\n\nAhora, la parte interesante sería realizar el gráfico. Sin embargo, a como mencioné anteriormente, debemos limpiar un poco la base de datos.\n\nPrimero, ordenamos los datos a partir de la fecha usando `arrange`, luego vamos a crear un ID y lo utilizaremos para  crear un acumulado por día de la siguiente forma:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange_data <- arrange(data, fecha)\narrange_data$id <- 1\narrange_data$acumulado <- cumsum(arrange_data$id)\n```\n:::\n\n\nAhora utilizamos `ggplot` y `gganimate` para crear el gráfico.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot del total de presos y presas políticas\nanimate <-  ggplot(\n  data = na.omit(arrange_data), \n  aes(\n    x = fecha,\n    y = acumulado\n    )\n  ) +\n  geom_point(alpha = 0.3, size = 5, colour = \"steelblue\") +\n  theme_classic() +\n  # labels and fonts\n  labs(title = \"Evolución total de presas y presos políticos en Nicaragua\",\n        subtitle = \"Abr 2018 - Abr 1, 2019: {frame_time}\",\n        y = \"Presas y presos políticos\",\n        x = \"\",\n        caption = \"Fuente: Comité Pro Liberación de Presas y Presos Políticos\\nExcluye 205 presas y presos políticos sin datos sobre fecha de captura\") +\n  theme(\n    text = element_text(size=14, family=\"Myriad Pro\"),\n    plot.caption = element_text(hjust = 0)\n  ) +\n  # transition options\n  transition_time(fecha) +\n  view_follow(fixed_y = TRUE) +\n  shadow_mark(size = 3, colour = 'grey', alpha = 0.3) +\n  ease_aes('linear')\n```\n:::\n\n\nEste código se puede desagregar en tres cosas: (1) los datos y axis; (2) diseño, etiquetas, y letra; y (3) transiciones.\n\nLa primera parte del código son los datos. Tenemos que quitar todas las observaciones que no tienen datos, por lo cual utilizamos `na.omit()`. Y nuestras variables de referencia son: `x = fecha` y `y= acumulado` (i.e., la variable que creamos anteriorment). El tema que ocupo es el clásico, y con los siguientes valores de los puntos de datos `geom_point(alpha = 0.3, size = 5, colour = \"steelblue\")`.\n\nLa parte de las etiquetas es un poco más sencillo, así que lo omitiré. Solo un punto a recordar es que utillizo Myriad Pro, y para poder \"cargarla\" en RStudio, necesitan el paquete `extrafont`.\n\nPor último, las opciones de transición. La variable fecha es nuestro tiempo de transición. Ésta variable nos da nuestra punto de partida y final. Para fijar el eje _y_ utilicé `view_follow()`. Si no lo ocupo, tanto el eje _x_ y eje _y_ no serían fijos. Para darle seguimiento a los puntos, utilicé `shadow_mark()`; el cual me deja ajustar el tamaño del punto y color.  La última opción es `ease_aes()`, la cual se ocupa para definir el cambio de un valor a otro durante la interporlación. En este caso utilicé la función lineal (i.e., `linear`).\n\nPara poder compilar nuestro gráfico tenemos que llamar el objeto `animate` que creamos anteriormente con el comando `animate()`, de la siguiente forma.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimate(animate, height = 500, width = 600)\n```\n:::\n\n\n\nEl primer argumento es nuestro objeto, y el segundo y tercero son la altura y ancho el gráfico respectivamente.\n\nPara guardar nuestro gráfico utilizamos `anim_save`, y recordamos escribir nuestra extensión. En este caso __.gif__.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanim_save(\"gif/preso_total_190401.gif\")\n```\n:::\n\n\nY así es como creamos nuestro gráfico animado con gganimate en R.\n\n![Finn](https://media.giphy.com/media/N2JaONOG63aMM/giphy.gif)\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}